import os
from re import sub
from shutil import rmtree
try:
    from configparser import ConfigParser
    python3 = True
except ImportError:
    from ConfigParser import ConfigParser
    python3 = False

class Blogfy(object):
    def write_to_file(self, filename, *args):
        given_args = [x for x in args]
        write_to   = {'1': 'index.html', '2': 'archive.html',
                      '3': 'forum.html', '4': 'search.html',
                      '5': given_args[0] + '.xml',
                      '6': os.path.join('tags', given_args[0], 'index.html'),
                      '7': (os.path.join('post', given_args[0], given_args[1],
                        given_args[2], 'index.html') if len(given_args) > 2 else str())}
        if filename in ['5', '6']:
            del given_args[0]
        if filename == '7':
            for x in range(3):
                del given_args[0]
        cur_file = os.path.join('generated', write_to[filename])\
                       .replace(os.path.join('generated', 'sitemap.xml'), 'sitemap.xml')
        self.open_and_write(cur_file, str().join(given_args))

    def open_and_write(self, filename, body):
        with open(filename, 'wt') as filee:
            filee.write(body)

    def important_var(self, var):
        return self.cfg.get('important', var)

    def read_static(self, filename):
        with open(filename, 'rt') as static_file:
            return static_file.read()

    def get_footer_version(self, given_footer):
        if given_footer   == 'i':
            footer_ip_two = self.footer_i
            github_ver    = self.github
        elif given_footer == 'two':
            footer_ip_two = self.footer_i_two
            github_ver    = self.github2
        else:
            footer_ip_two = self.footer_p
            github_ver    = self.github_post

        return footer_ip_two.replace('<!-- tags_bar -->', self.tags_sidebar)\
                .replace('<!-- tags_bar2 -->', self.tags_body)\
                .replace('<!-- recent_bar -->', self.recent_sidebar)\
                .replace('<!-- recent posts -->', self.recent_posts)\
                .replace('<!-- github -->', github_ver)\
                .replace('<!-- github_sidebar -->', self.git_sidebar)\
                .replace('github_account_name', self.cfg.get('social', 'github account name'))

    def replace_user_variables(self, post_bdy):
        for var, val in self.cfg.items('user variables'):
            post_bdy = post_bdy.replace(var, val)
        return post_bdy

    def start_sitemap(self, url_loc_lastmod=list()):
        from time import strftime, localtime
        os.chdir('generated')
        head = '<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"><!-- Generated by Blogfy https://github.com/wifiextender/blogfy -->'
        for root, _, files in os.walk(os.curdir):
            for name in files:
                if name.endswith('.html'):
                    if root.startswith(os.path.join(os.curdir, 'post')):
                        time_of_last_mod = os.path.getmtime((os.getcwd()\
                                        .replace('generated', str()) + os.path.join('static',
                                                                      'text posts') + os.sep)\
                                            + os.path.split(root)[1])
                    else:
                        time_of_last_mod = os.path.getmtime(name)
                    strftime_last_mod    = strftime('%Y-%m-%d', localtime(time_of_last_mod))
                    found_file       = os.path.join(root, name).replace(os.curdir + os.sep,
                                                                                self.address)
                    url_loc_lastmod.append('<url><loc>{0}</loc><lastmod>{1}</lastmod><priority>0.5000</priority></url>'\
                                                       .format(found_file, strftime_last_mod))
        self.write_to_file('5', 'sitemap', head, str().join(url_loc_lastmod), '</urlset>')

    def start_tags(self, sec_dict=dict(), temp_list=list()):
        tg   = [x.lstrip(' ') for x in self.cfg.get('customizations', 'tags').split(',')]
        span = '<span>{0}</span>&nbsp;<a href="{1}">{2}</a><br />'
        for z in self.sorted:
            for x in tg:
                if x in z[3]:
                    if not x in sec_dict:
                        sec_dict[x] = [span.format(z[0], z[6], z[2])]
                    else:
                        sec_dict[x].append(span.format(z[0], z[6], z[2]))

        font_plus_link = '<a style="font-size:{0}px" href="{1}tags/{2}/">{2}</a>&nbsp;'
        for x,z in sec_dict.items():
            if len(z) < 5:
                self.tags_body += font_plus_link.format(14, self.address, x)
            elif 5 >= len(z) < 8:
                self.tags_body += font_plus_link.format(18, self.address, x)
            else:
                self.tags_body += font_plus_link.format(30, self.address, x)
            tags_dir = os.path.join('generated', 'tags', x)
            if not tags_dir in temp_list:
                os.makedirs(tags_dir)
                temp_list.append(tags_dir)
                
        for x,z in sec_dict.items():
            self.write_to_file('6', x, self.hf_pagination,
                            'tag: {0}<br />{1}'.format(x, str().join(reversed(z))),
                                self.get_footer_version('two'))

    def start_rss(self, rss_item=str()):
        head = '<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>{0}</title><link>{1}</link><description>{2}</description>'\
                        .format(self.important_var('name'), self.address,
                                self.important_var('description'))
        for x,_ in zip(self.sorted, range(self.num_of_fp_posts)):
            rss_item += '<item><title>{0}</title><pubDate>{1}</pubDate><link>{2}</link><description>{3}</description></item>'\
                        .format(x[2], x[0], x[6], x[5])
        self.write_to_file('5', 'rss', head, rss_item, '</channel></rss>')

    def start_pagination(self, page_number=0):
        from shutil import move
        adr_page_num = self.address + 'page/{0}/'
        while self.one_dict:
            posts_as_body  = str()
            for x,_ in zip(sorted(self.one_dict.values(), reverse=True),
                           range(self.num_of_fp_posts)):
                posts_as_body += x[7]
                del self.one_dict[x[1]]

            page_number   += 1
            pagination_dir = os.path.join('generated', 'page', str(page_number))
            pag            = os.path.join(pagination_dir, 'index.')
            os.makedirs(pagination_dir)
            self.open_and_write(pag + 'html', self.hf_pagination + posts_as_body + \
                    self.get_footer_version('two').replace('<!-- pagination -->',
                    '<div class="page-navigation cf"><div class="nav-next">\
                    <a href="{0}">Newer Entries</a>\
                    </div><div class="nav-previous"><a href="{1}">Older Entries</a></div></div>'
                        .format((self.address if not page_number > 1
                                           else adr_page_num.format(page_number - 1)),
                                adr_page_num.format(page_number + 1))))

        # The last pagination page does not have to contain "Older Entries" button
        repl_str = self.read_static(pag + 'html')\
                    .replace('<div class="nav-previous"><a href="{0}">Older Entries</a></div>'
                        .format(adr_page_num.format(page_number + 1)), str())
        self.open_and_write(pag + 'html.bak', repl_str)
        move(pag + 'html.bak', pag + 'html')

    def __init__(self):
        self.cfg = ConfigParser()
        (self.cfg.read('config.ini') if python3 else self.cfg.readfp(open('config.ini')))
        template = self.cfg.get('customizations', 'template in use')

        def read_and_replace_template(given_str):
            return ' '.join(self.read_static(os.path.join('static', 'templates',
                                                          template, given_str))
                .replace('<!-- description -->', self.important_var('description'))
                .replace('<!-- title -->', self.important_var('name'))
                .replace('<!-- footer_text -->',
                                          self.cfg.get('customizations', 'footer text'))
                .replace('<!-- author -->', self.cfg.get('important', 'author'))
                .replace('<!-- charset -->', self.cfg.get('customizations', 'blog charset'))
                                                                                   .split())
        header             = read_and_replace_template('header')
        hf_post            = read_and_replace_template('header_post')
        self.hf_pagination = read_and_replace_template('header_pagination')
        forum_header       = read_and_replace_template('header_forum')
        search_header      = read_and_replace_template('header_search')
        archive_header     = read_and_replace_template('header_archive')
        self.footer_p      = read_and_replace_template('footer_post')
        self.footer_i      = read_and_replace_template('footer')
        self.footer_i_two  = self.footer_i

        def f_to_gen(say_what):
            return self.cfg.getboolean('advanced customizations', say_what)

        if f_to_gen('disqus comments'):
            disqus_section = '''<div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname = 'blogfy_';(function() {var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>'''
            self.footer_p  = self.footer_p.replace('<!-- comment_section -->', disqus_section)\
                                .replace('blogfy_', self.cfg.get('social', 'disqus shortname'))

        sidebar            = '<aside id="sidebar"><ul><li class="block"><div class="sidebar-top"></div><div class="sidebar-content">{0}</div><div class="sidebar-bottom"></div></li></ul></aside>'
        self.github        = str()
        self.github2       = str()
        self.git_sidebar   = str()
        self.github_post   = str()
        if f_to_gen('github sidebar') and self.cfg.get('social', 'github account name'):
            remain           = '{$("#github-projects").loadRepositories("github_account_name");});'
            git_base         = '<script src="{0}css/js/jquery.min.js" type="text/javascript"></script><script src="{0}css/js/github.js" type="text/javascript"></script><script type="text/javascript">$(function() {1}</script>'
            self.github      = git_base.format(str(), remain)
            self.github2     = git_base.format('../../', remain)
            self.git_sidebar = sidebar.format('<h4 class="heading">GitHub Repos</h4><div id="github-projects"></div>')
            self.github_post = git_base.format('../../../../', remain)

        self.recent_sidebar      = str()
        if f_to_gen('recent posts sidebar'):
            self.recent_sidebar  = sidebar.format('<h4 class="heading">Recent Posts</h4><ul><!-- recent posts --></ul>')

        self.one_dict = dict()
        self.address = self.important_var('address')
        for post in os.listdir(os.path.join('static', 'text posts')):
            f_cont        = self.read_static(os.path.join('static', 'text posts', post))\
                                        .replace('$addr/', self.address)
            f_cont        = self.replace_user_variables(f_cont).split('\n')
            title         = f_cont[0][8:]
            date          = f_cont[1][8:]
            author        = f_cont[2][8:]
            post_body     = '<h1>{0}</h1><br /><div class="date-left">{1}</div><div class="posted-by">Posted by {2}</div><div class="articleline2"></div>'\
                                        .format(title, date, author)\
                                                + str().join(f_cont[4:])
            limited_body  = str().join(f_cont[4:8])
            rss_body      = sub('<[^>]*>', str(), limited_body)
            addr_postname = self.address + 'post/' + date.split('-')[0]  + '/' + \
                                        date.split('-')[1] + '/' + post + '/'
            # date[0], filename[1], title[2], post_body[3], limited_body[4], rss[5],
            # website_plus_post[6], index_post[7], archive_links[8], recent_posts[9]
            self.one_dict[post] = (date, post, title, post_body, limited_body,
                                    rss_body, addr_postname,
                                    "<div class=" + date + "><a href='" + addr_postname + "'><h1>" + title + "</h1></a><div class='articleline2'></div>" + limited_body + \
                                    "</div><br /><a href='" + addr_postname + "' class="'"action-button"'"><span><b>Read more</b></span></a><br /><br /><br />",
                                    "<span>" + date + "</span><a href='" + addr_postname + "'>" + '&nbsp;' +  title + "</a><br />",
                                    "<li class=" + date + "><a href='" + addr_postname + "'>" + '<span>' + title + '</span>'+ "</a></li>")

        def gdir(folder):
            return os.path.join('generated', folder)
        for x in [gdir('page'), gdir('post'), gdir('tags')]:
            if os.path.exists(x):
                rmtree(x)

        self.sorted  = sorted(self.one_dict.values(), reverse=True)
        archive_body = str()
        for p, number in zip(self.sorted, reversed(range(1, len(
                                                  self.one_dict.values()) + 1))):
            archive_body += '#' + str(number) + ' - ' + p[8]
                                    # generated{sep}post{sep}year{sep}month{sep}post_name
            os.makedirs(os.path.join('generated', 'post', p[0].split('-')[0], p[0].split('-')[1], p[1]))

        self.recent_posts = str()
        if f_to_gen('recent posts sidebar'):
            self.recent_posts = str().join(x[9] for x,_ in zip(self.sorted, range(
                    self.cfg.getint('customizations','number of recent posts'))))

        self.num_of_fp_posts = self.cfg.getint('customizations', 'number of posts on front page')
        index_body = str().join(x[7] for x,_ in zip(self.sorted, range(self.num_of_fp_posts)))

        if f_to_gen('rss'):
            self.start_rss()

        self.tags_body    = str()
        self.tags_sidebar = str()
        if f_to_gen('tags sidebar') and self.cfg.get('customizations', 'tags'):
            self.tags_sidebar = sidebar.format('<h4 class="heading">Tags</h4><!-- tags_bar2 -->')
            self.start_tags()

        for x in self.sorted:
            self.write_to_file('7', x[0].split('-')[0], x[0].split('-')[1], x[1],
                hf_post.replace('<!-- title_post -->', x[2]), x[3],
                    self.get_footer_version('p'))

        fi_repl_recent_posts = self.get_footer_version('i')

        no_pagination = True
        if f_to_gen('pagination'):
            if len(self.one_dict.keys()) > self.num_of_fp_posts:
                self.write_to_file('1', header, index_body.replace('\n', str()), fi_repl_recent_posts\
                   .replace('<!-- pagination -->', '<div class="page-navigation cf">\
                   <div class="nav-previous"><a href="{0}">Older Entries</a></div></div>'
                   .format(self.address + 'page/1/')))
                for x,_ in zip(self.sorted, range(self.num_of_fp_posts)):
                   del self.one_dict[x[1]]
                no_pagination = False
                self.start_pagination()

        if no_pagination:
            self.write_to_file('1', header, index_body, fi_repl_recent_posts)
        self.write_to_file('2', archive_header, archive_body, fi_repl_recent_posts)
        if f_to_gen('forum page'):
            self.write_to_file('3', forum_header, fi_repl_recent_posts)
        if f_to_gen('search page'):
            self.write_to_file('4', search_header, fi_repl_recent_posts)
        if f_to_gen('sitemap'):
            self.start_sitemap()