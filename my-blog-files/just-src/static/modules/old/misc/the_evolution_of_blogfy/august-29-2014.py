#!/usr/bin/env python2
import os
from re import sub
from shutil import move, rmtree
from time import strftime, localtime
try:
    from configparser import ConfigParser
    python3 = True
except ImportError:
    from ConfigParser import ConfigParser
    python3 = False

class WriteToFile(object):
    def __init__(self, filename, *args):
        _given_args = [x for x in args]
        _write_to = {
        '1': 'index.html', '2': 'archive.html',
        '3': 'forum.html', '4': 'search.html',
        '5': _given_args[0] + '.xml',
        '6': os.path.join('tags', _given_args[0], 'index.html'),
        '7': (os.path.join('post', _given_args[0], _given_args[1],
            _given_args[2], 'index.html') if len(_given_args) > 2 else str())
        }
        if filename in ['5', '6']:
            del _given_args[0]
        if filename == '7':
            for x in range(3):
                del _given_args[0]
        cur_file = os.path.join('generated', _write_to[filename])
        with open((cur_file if not cur_file\
                    .endswith('sitemap.xml') else 'sitemap.xml'), 'wt') as f:
            f.write(''.join(_given_args))

class Blogfy(object):
    def read_static(self, filename):
        with open(filename, 'rt') as static_file:
            return static_file.read()

    def get_footer_version(self, given_footer):
        if given_footer   == 'i':
            footer_ip_two = self.footer_i
            github_ver    = self.github
        elif given_footer == 'two':
            footer_ip_two = self.footer_i_two
            github_ver    = self.github2
        else:
            footer_ip_two = self.footer_p
            github_ver    = self.github_post

        return footer_ip_two.replace('<!-- tags_bar -->', self.tags_sidebar)\
                .replace('<!-- tags_bar2 -->', self.tags_body)\
                .replace('<!-- recent_bar -->', self.recent_sidebar)\
                .replace('<!-- recent posts -->', self.recent_posts)\
                .replace('<!-- github -->', github_ver)\
                .replace('<!-- github_sidebar -->', self.git_sidebar)\
                .replace('github_account_name', self.cfg.get('social', 'github account name'))

    def replace_user_variables(self, post_bdy):
        for var, val in self.cfg.items('user variables'):
            post_bdy = post_bdy.replace(var, val)
        return post_bdy

    def start_sitemap(self, url_loc_lastmod = str()):
        os.chdir('generated')
        head = '''<?xml version="1.0" encoding="UTF-8"?>
<urlset
      xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
            http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
<!-- Generated by blogfy https://github.com/wifiextender/blogfy -->'''

        for root, dirs, files in os.walk(os.curdir):
            for name in files:
                if name.endswith('.html'):
                    if root.startswith(os.path.join(os.curdir, 'post')):
                        time_of_last_mod = os.path.getmtime((os.getcwd()\
                            .replace('generated', str()) + 'text posts' + os.sep)\
                                                      + os.path.split(root)[1])
                    else:
                        time_of_last_mod = os.path.getmtime(name)
                    strftime_last_mod    = strftime('%Y-%m-%d', 
                                            localtime(time_of_last_mod))
                    found_file       = os.path.join(root, name)\
                                        .replace(os.curdir + os.sep,
                                            self.cfg.get('important', 'address'))
                    url_loc_lastmod += '''\n<url>
    <loc>{0}</loc>
    <lastmod>{1}</lastmod>
    <priority>0.5000</priority>
</url>'''.format(found_file, strftime_last_mod)
        WriteToFile('5', 'sitemap', head, url_loc_lastmod, '\n</urlset>')

    def start_tags(self):
        tg = [x.lstrip(' ') for x in self.cfg.get('customizations', 'tags').split(',')]
        sec_dict = dict()
        for z in sorted(self.one_dict.values()):
            for x in tg:
                if x in z[3]:
                    if not x in sec_dict:
                        sec_dict[x] = ['<span>{0}</span>&nbsp;<a href="{1}">{2}</a><br />'
                        .format(z[0], z[6], z[2])]
                    else:
                        sec_dict[x].append('<span>{0}</span>&nbsp;<a href="{1}">{2}</a><br />'
                            .format(z[0], z[6], z[2]))
        temp_list = list()
        for x,z in sec_dict.items():
            font_plus_link = '<a style="font-size:{0}px" href="{1}tags/{2}/">{2}</a>&nbsp;'
            if len(z) < 5:
                self.tags_body += font_plus_link.format(
                    14, self.cfg.get('important', 'address'), x)
            elif 5 >= len(z) < 8:
                self.tags_body += font_plus_link.format(
                    18, self.cfg.get('important', 'address'), x)
            else:
                self.tags_body += font_plus_link.format(
                    30, self.cfg.get('important', 'address'), x)
            tags_dir = os.path.join('generated', 'tags', x)
            if not tags_dir in temp_list:
                os.makedirs(tags_dir)
                temp_list.append(tags_dir)
                
        for x,z in sec_dict.items():
            WriteToFile('6', x, self.hf_pagination, 'tag: {0}<br />{1}'\
                .format(x, ''.join(reversed(z))),
                self.get_footer_version('two'))

    def start_rss(self, rss_item = str()):
        head = '''<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
        <title>{title}</title>
        <link>{address}</link>
        <description>{description}</description>'''.format(
            title=self.cfg.get('important', 'name'),
            address=self.cfg.get('important', 'address'),
            description=self.cfg.get('important', 'description'))
        for x,z in zip(sorted(self.one_dict.values(), reverse=True),
            range(self.num_of_fp_posts)):
            rss_item += '''
                <item>
                    <title>{title2}</title>
                    <pubDate>{date2}</pubDate>
                    <link>{address2}</link>
                    <description>{description2}</description>
            </item>'''.format(title2=x[2], date2=x[0], address2=x[6], description2=x[5])
        WriteToFile('5', 'rss', head, rss_item, '\n\t</channel>\n</rss>')

    def start_pagination(self):
        page_number = 0
        while self.one_dict:
            posts_as_body = str()
            for x,z in zip(sorted(self.one_dict.values(), reverse=True),
                range(self.num_of_fp_posts)):
                posts_as_body += x[7]
                del self.one_dict[x[1]]
            page_number += 1

            pagination_dir = os.path.join('generated', 'page', str(page_number)) + os.sep
            os.makedirs(pagination_dir)
            address = self.cfg.get('important', 'address')
            adr_page_num = address + 'page/{0}/'
            with open(pagination_dir + 'index.html', 'wt') as bambam:
                bambam.write(self.hf_pagination + posts_as_body + \
                    self.get_footer_version('two').replace('<!-- pagination -->',
                    '<div class="page-navigation cf"><div class="nav-next">\
                    <a href="{newer}">Newer Entries</a>\
                    </div><div class="nav-previous"><a href="{older}">Older Entries</a></div></div>'
                        .format(newer=(address if not page_number > 1
                                           else adr_page_num.format(page_number-1)),
                                older=adr_page_num.format(page_number+1))))

        # The last pagination page does not have to contain "Older Entries" button
        with open(pagination_dir + 'index.html', 'rt') as infile, \
        open(pagination_dir + 'index.html.bak', 'wt') as outfile:
            replace_that_string = infile.read()\
                    .replace('<div class="nav-previous"><a href="{older}">Older Entries</a></div>'
                    .format(older=adr_page_num.format(page_number+1)), str())
            outfile.write(replace_that_string)
        move(pagination_dir + 'index.html.bak', pagination_dir + 'index.html')

    def __init__(self):
        self.cfg = ConfigParser()
        (self.cfg.read('config.ini') if python3 else self.cfg.readfp(open('config.ini')))
        self.one_dict = dict()
        template = self.cfg.get('customizations', 'template in use')
        self.num_of_fp_posts = self.cfg.getint('customizations', 'number of posts on front page')

        def read_and_replace_template(given_str):
            return ' '.join(self.read_static(os.path.join('static', template, given_str))\
            .replace('site_description', self.cfg.get('important', 'description'))\
            .replace('titlefixed', self.cfg.get('important', 'name'))\
            .replace('footer_text', self.cfg.get('customizations', 'footer text')).split())

        header             = read_and_replace_template('header')
        hf_post            = read_and_replace_template('header_post')
        self.hf_pagination = read_and_replace_template('header_pagination')
        forum_header       = read_and_replace_template('header_forum')
        search_header      = read_and_replace_template('header_search')
        archive_header     = read_and_replace_template('header_archive')
        self.footer_p      = read_and_replace_template('footer_post')
        self.footer_i      = read_and_replace_template('footer')
        self.footer_i_two  = self.footer_i

        def f_to_gen(say_what):
            return self.cfg.getboolean('advanced customizations', say_what)

        if f_to_gen('disqus comments'):
            disqus_section = '''<div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname = 'blogfy_';(function() {var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>'''
            self.footer_p  = self.footer_p.replace('<!-- comment_section -->', disqus_section)\
                .replace('blogfy_', self.cfg.get('social', 'disqus shortname'))

        sidebar            = '<aside id="sidebar"><ul><li class="block"><div class="sidebar-top"></div><div class="sidebar-content">{0}</div><div class="sidebar-bottom"></div></li></ul></aside>'
        self.github        = str()
        self.github2       = str()
        self.git_sidebar   = str()
        self.github_post   = str()
        if f_to_gen('github sidebar') and self.cfg.get('social', 'github account name'):
            remain           = '{$("#github-projects").loadRepositories("github_account_name");});'
            git_base         = '<script src="{0}css/js/jquery.min.js" type="text/javascript"></script><script src="{0}css/js/github.js" type="text/javascript"></script><script type="text/javascript">$(function() {1}</script>'
            self.github      = git_base.format(str(), remain)
            self.github2     = git_base.format("../../", remain)
            self.git_sidebar = sidebar.format('<h4 class="heading">GitHub Repos</h4><div id="github-projects"></div>')
            self.github_post = git_base.format('../../../../', remain)

        self.recent_sidebar      = str()
        if f_to_gen('recent posts sidebar'):
            self.recent_sidebar  = sidebar.format('<h4 class="heading">Recent Posts</h4><ul><!-- recent posts --></ul>')

        for post in os.listdir('text posts'):
            with open(os.path.join('text posts', post), 'rt') as f:
                f_cont       = f.read().replace('$addr/',
                                    self.cfg.get('important', 'address'))
                f_cont       = self.replace_user_variables(f_cont).split('\n')
                title        = f_cont[0][7:]
                date         = f_cont[1][6:]
                post_body    = '<h1>{0}</h1><br />{1}<div class="articleline2"></div>'\
                                    .format(title, date) + ''.join(f_cont[3:])
                limited_body = ''.join(f_cont[3:8])
                rss_body     = sub('<[^>]*>', '', limited_body)
                website_addr_plus_postname = self.cfg.get('important', 'address')\
                                    + 'post/' + date.split('-')[0]  + '/' + \
                                    date.split('-')[1] + '/' + post + '/'
                # date[0], filename[1], title[2], post_body[3], limited_body[4], rss[5],
                # website_plus_post[6], index_post[7], archive_links[8], recent_posts[9]
                self.one_dict[post] = (date, post, title, post_body, limited_body,
                                            rss_body, website_addr_plus_postname,
"<div class=" + date + "><a href='" + website_addr_plus_postname + "'><h1>" + title + "</h1></a><div class='articleline2'></div>" + limited_body + \
"</div><br /><a href='" + website_addr_plus_postname + "' class="'"action-button"'"><span><b>Read more</b></span></a><br /><br /><br />",
"<span>" + date + "</span><a href='" + website_addr_plus_postname + "'>" + '&nbsp;' +  title + "</a><br />",
"<li class=" + date + "><a href='" + website_addr_plus_postname + "'>" + '<span>' + title + '</span>'+ "</a></li>")

        gdir = 'generated' + os.sep
        for x in [gdir + 'page', gdir + 'post', gdir + 'tags']:
            if os.path.exists(x):
                rmtree(x)

        archive_body = str()
        for post_addr, number in zip(sorted(self.one_dict.values(), reverse=True),
            reversed(range(1, len(self.one_dict.values()) + 1))):
            archive_body += '#{post_numb} - {ymd_post_title}'\
                            .format(post_numb=number, ymd_post_title=post_addr[8])
            split_z = post_addr[0].split('-')
                                    # generated{sep}post{sep}year{sep}month{sep}post_name
            os.makedirs(os.path.join(gdir, 'post', split_z[0], split_z[1], post_addr[1]))

        self.recent_posts = str()
        if f_to_gen('recent posts sidebar'):
            for x,z in zip(sorted(self.one_dict.values(), reverse=True),
                range(self.cfg.getint('customizations', 'number of recent posts'))):
                self.recent_posts += x[9]

        index_body = str()
        for x,z in zip(sorted(self.one_dict.values(), reverse=True),
            range(self.num_of_fp_posts)):
            index_body += x[7]

        if f_to_gen('rss'):
            self.start_rss()

        self.tags_body    = str()
        self.tags_sidebar = str()
        if f_to_gen('tags sidebar') and self.cfg.get('customizations', 'tags'):
            self.tags_sidebar = sidebar.format('<h4 class="heading">Tags</h4><!-- tags_bar2 -->')
            self.start_tags()

        for x in sorted(self.one_dict.values(), reverse=True):
            split_x = x[0].split('-')
            WriteToFile('7', split_x[0], split_x[1], x[1],
                hf_post.replace('title_post', x[2]), x[3],
                    self.get_footer_version('p'))

        fi_repl_recent_posts = self.get_footer_version('i')

        no_pagination = True
        if f_to_gen('pagination'):
            if len(self.one_dict.keys()) > self.num_of_fp_posts:
                WriteToFile('1', header, index_body.replace('\n', ''), fi_repl_recent_posts\
                   .replace('<!-- pagination -->', '<div class="page-navigation cf">\
                   <div class="nav-previous"><a href="{older}">Older Entries</a></div></div>'
                   .format(older=self.cfg.get('important', 'address') + 'page/1/')))
                for x,z in zip(sorted(self.one_dict.values(), reverse=True),
                   range(self.num_of_fp_posts)):
                   del self.one_dict[x[1]]
                no_pagination = False
                self.start_pagination()

        if no_pagination:
            WriteToFile('1', header, index_body, fi_repl_recent_posts)
        WriteToFile('2', archive_header, archive_body, fi_repl_recent_posts)
        if f_to_gen('forum page'):
            WriteToFile('3', forum_header, fi_repl_recent_posts)
        if f_to_gen('search page'):
            WriteToFile('4', search_header, fi_repl_recent_posts)
        if f_to_gen('sitemap'):
            self.start_sitemap()

if __name__ == '__main__':
    Blogfy()